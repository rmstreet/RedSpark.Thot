// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RedSpark.Thot.Api.Infra.Data.EF.Context;

namespace RedSpark.Thot.Api.Infra.Data.EF.Migrations
{
    [DbContext(typeof(ThotContext))]
    [Migration("20190723194121_AddEAjuste-Thot")]
    partial class AddEAjusteThot
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RedSpark.Thot.Api.Domain.Entities.Leads.Coment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Coment");
                });

            modelBuilder.Entity("RedSpark.Thot.Api.Domain.Entities.Leads.Lead", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedById");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasMaxLength(15);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasMaxLength(60);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Lead");
                });

            modelBuilder.Entity("RedSpark.Thot.Api.Domain.Entities.Leads.LeadComent", b =>
                {
                    b.Property<int>("LeadId");

                    b.Property<int>("ComentId");

                    b.Property<int?>("AnswerComentId");

                    b.Property<int?>("AnswerLeadId");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedById");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("LeadId", "ComentId");

                    b.HasIndex("ComentId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("AnswerLeadId", "AnswerComentId");

                    b.ToTable("LeadComent");
                });

            modelBuilder.Entity("RedSpark.Thot.Api.Domain.Entities.Persons.PersonLead", b =>
                {
                    b.Property<int>("LeadId");

                    b.Property<int>("PersonId");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("LeadId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonLead");
                });

            modelBuilder.Entity("RedSpark.Thot.Api.Domain.Entities.Persons.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Password")
                        .HasColumnType("varchar")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Username")
                        .HasColumnType("varchar")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Person");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("RedSpark.Thot.Api.Domain.Entities.Projects.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BeginDate");

                    b.Property<string>("Company")
                        .IsRequired();

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("ResponsibleId");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ResponsibleId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("RedSpark.Thot.Api.Domain.Entities.Projects.ProjectPerson", b =>
                {
                    b.Property<int>("ProjectId");

                    b.Property<int>("PersonId");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Id");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("ProjectId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("ProjectPerson");
                });

            modelBuilder.Entity("RedSpark.Thot.Api.Domain.Entities.Skills.PersonSkill", b =>
                {
                    b.Property<int>("PersonId");

                    b.Property<int>("SkillId");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Id");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("PersonId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("PersonSkill");
                });

            modelBuilder.Entity("RedSpark.Thot.Api.Domain.Entities.Skills.ProjectSkill", b =>
                {
                    b.Property<int>("ProjectId");

                    b.Property<int>("SkillId");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Id");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("ProjectId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("ProjectSkill");
                });

            modelBuilder.Entity("RedSpark.Thot.Api.Domain.Entities.Skills.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("RedSpark.Thot.Api.Domain.Entities.Persons.Person", b =>
                {
                    b.HasBaseType("RedSpark.Thot.Api.Domain.Entities.Persons.User");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500);

                    b.Property<string>("Job")
                        .HasColumnType("varchar")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasMaxLength(100);

                    b.Property<string>("Phone");

                    b.Property<string>("Resume")
                        .HasColumnType("varchar")
                        .HasMaxLength(1000);

                    b.Property<string>("UrlGithub")
                        .HasMaxLength(500);

                    b.HasDiscriminator().HasValue("Person");
                });

            modelBuilder.Entity("RedSpark.Thot.Api.Domain.Entities.Leads.Lead", b =>
                {
                    b.HasOne("RedSpark.Thot.Api.Domain.Entities.Persons.Person", "CreatedBy")
                        .WithMany("LeadsCreatedByMe")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RedSpark.Thot.Api.Domain.Entities.Leads.LeadComent", b =>
                {
                    b.HasOne("RedSpark.Thot.Api.Domain.Entities.Leads.Coment", "Coment")
                        .WithMany("LeadComents")
                        .HasForeignKey("ComentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RedSpark.Thot.Api.Domain.Entities.Persons.Person", "CreatedBy")
                        .WithMany("ComentsByMe")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RedSpark.Thot.Api.Domain.Entities.Leads.Lead", "Lead")
                        .WithMany("Coments")
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RedSpark.Thot.Api.Domain.Entities.Leads.LeadComent", "LeadComentFather")
                        .WithMany("Answers")
                        .HasForeignKey("AnswerLeadId", "AnswerComentId");
                });

            modelBuilder.Entity("RedSpark.Thot.Api.Domain.Entities.Persons.PersonLead", b =>
                {
                    b.HasOne("RedSpark.Thot.Api.Domain.Entities.Leads.Lead", "Lead")
                        .WithMany("PersonsFollowing")
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RedSpark.Thot.Api.Domain.Entities.Persons.Person", "Person")
                        .WithMany("LeadsFollowedByMe")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RedSpark.Thot.Api.Domain.Entities.Projects.Project", b =>
                {
                    b.HasOne("RedSpark.Thot.Api.Domain.Entities.Persons.Person", "Responsible")
                        .WithMany("ProjectsResponsible")
                        .HasForeignKey("ResponsibleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RedSpark.Thot.Api.Domain.Entities.Projects.ProjectPerson", b =>
                {
                    b.HasOne("RedSpark.Thot.Api.Domain.Entities.Persons.Person", "Person")
                        .WithMany("ProjectsMember")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RedSpark.Thot.Api.Domain.Entities.Projects.Project", "Project")
                        .WithMany("Members")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RedSpark.Thot.Api.Domain.Entities.Skills.PersonSkill", b =>
                {
                    b.HasOne("RedSpark.Thot.Api.Domain.Entities.Persons.Person", "Person")
                        .WithMany("MySkills")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RedSpark.Thot.Api.Domain.Entities.Skills.Skill", "Skill")
                        .WithMany("PersonSkill")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RedSpark.Thot.Api.Domain.Entities.Skills.ProjectSkill", b =>
                {
                    b.HasOne("RedSpark.Thot.Api.Domain.Entities.Projects.Project", "Project")
                        .WithMany("Skills")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RedSpark.Thot.Api.Domain.Entities.Skills.Skill", "Skill")
                        .WithMany("ProjectSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
